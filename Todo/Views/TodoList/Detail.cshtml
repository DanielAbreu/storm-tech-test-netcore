@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Data;
@using Todo.Services
@using Todo.Views.TodoItem
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

@inject ApplicationDbContext dbContext

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul id="itemList" class="list-group">

        <li class="list-group-item">
            <section>
                <form>

                    @Html.HiddenFor(m => m.TodoItemCreateFields.TodoListTitle)

                    <div class="form-group">
                        <label asp-for="TodoItemCreateFields.Title"></label>
                        <input asp-for="TodoItemCreateFields.Title" name="Title" class="form-control" />
                        <span asp-validation-for="TodoItemCreateFields.Title" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="TodoItemCreateFields.Importance"></label>
                        @Html.DropDownListFor(
                        m => m.TodoItemCreateFields.Importance,
                        SelectListConvenience.ImportanceSelectListItems,
                        new {@class="form-control"}
                        )
                        <span asp-validation-for="TodoItemCreateFields.Importance" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="TodoItemCreateFields.ResponsiblePartyId">Assigned to</label>
                        @Html.DropDownListFor(
                        m => m.TodoItemCreateFields.ResponsiblePartyId,
                        dbContext.UserSelectListItems(),
                        new {@class="form-control"}
                        )
                        <span asp-validation-for="TodoItemCreateFields.ResponsiblePartyId" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <a href="javascript:void(0)" class="btn btn-default" onclick="submitTodoItem()">Save</a>
                    </div>

                </form>
            </section><br>
            <input type="checkbox" id="hideDoneButton" onclick="hideTasksDone()" name="Hide tasks done">
            <label for="hideDoneButton"> Hide tasks done</label><br>
            <button id="orderByRank" onclick="orderByRank()">Order by rank</button>
        </li>

        @foreach (var item in Model.Items.OrderBy(item => item.Importance))
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li id="item-@item.TodoItemId" class="list-group-item @contextualClass">
                
                <div class="row">

                <div class="col-md-8">
                    <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                        @if (item.IsDone)
                        {
                            <s>@item.Title</s>
                        }
                        else
                        {
                            <text>@item.Title</text>
                        }
                    </a>
                </div>

                <div class="col-md-4 text-right">
                    <small>
                            @if (!string.IsNullOrEmpty(item.DisplayName))
                            {
                                <text>@item.DisplayName</text>
                                <br>
                            }
                            <text>@item.ResponsibleParty.UserName</text>

                        <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30"/>

                    </small>
                </div>
                </div>

            </li>
        }
    </ul>
</div>

<script type="text/javascript">
    let items = @Json.Serialize(Model.Items);

    function hideTasksDone(){
        let hideCheckbox = document.getElementById("hideDoneButton");

        let itemsDone = items.filter(item => item.isDone);

        for(let i = 0; i < itemsDone.length; ++i){
            let itemNotDoneElem = document.getElementById("item-" + itemsDone[i].todoItemId);
            itemNotDoneElem.style.display = hideCheckbox.checked ? 'none' : 'block';
        }
    }

    function orderByRank(){
        let itemsOrderedByRank = items.sort((item1,item2) => item1.rank - item2.rank);
        let ulElem = document.getElementById("itemList");

        itemsOrderedByRank.forEach((item) => ulElem.appendChild(document.getElementById("item-" + item.todoItemId)));
    }

    function submitTodoItem() {
        var data = {
            TodoListTitle: $('#TodoItemCreateFields_TodoListTitle').val(),
            Title: $('#TodoItemCreateFields_Title').val(),
            Importance: $('#TodoItemCreateFields_Importance').val(),
            ResponsiblePartyId: $('#TodoItemCreateFields_ResponsiblePartyId').val()
            };
        $.ajax({
            type: 'POST',
            url: "@Url.Action("CreateItem", "TodoItem", new { todoListId = Model.TodoListId})",
            data: data,
            success: function (result) {
                location.reload();
            },
            error: function () {
                alert('Todo item creation failed');
            }
        })
    }
</script>